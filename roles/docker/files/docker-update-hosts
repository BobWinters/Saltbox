#!/usr/bin/env bash
set -e -u -o pipefail

hosts_file=/etc/hosts
begin_block="# BEGIN DOCKER CONTAINERS"
end_block="# END DOCKER CONTAINERS"
monitor_interval=${1:-3600}  # Use the first argument as the interval, with a default of 3600 seconds

# Cleanup function to execute upon receiving a signal
cleanup() {
    echo "Caught signal, exiting..."
    exit 0  # Exit cleanly
}

# Trap SIGTERM and SIGINT to call the cleanup function
trap cleanup SIGTERM SIGINT

if ! grep -Fxq "$begin_block" "$hosts_file"; then
    echo -e "\n${begin_block}\n${end_block}\n" >> "$hosts_file"
fi

# Function to update the hosts file with current Docker containers' info
update_hosts_file() {
    local hosts_file_tmp="$(mktemp)"
    docker container ls -q | xargs -r docker container inspect | \
    jq -r '.[] | if (.NetworkSettings.Networks[].IPAddress | length > 0) then "\(.NetworkSettings.Networks[].IPAddress) \(.NetworkSettings.Networks[].Aliases | select(length > 0) | join(" ")) \(.Name | sub("^/"; "") | sub("_1$"; "") | sub("-1$"; "")).saltbox" else "# no ip address: \(.Name | sub("^/"; ""))" end' | \
    sed -ne "/^${begin_block}$/ {p; r /dev/stdin" -e ":a; n; /^${end_block}$/ {p; b}; ba}; p" "$hosts_file" \
    > "$hosts_file_tmp"
    chmod 644 "$hosts_file_tmp"
    mv "$hosts_file_tmp" "$hosts_file"
}

# Main monitoring function
monitor_docker_events() {
    # Immediately update the hosts file at the start
    update_hosts_file

    # Listen for Docker events and update hosts file accordingly
    docker events --format '{{json .}}' | while read event; do
        update_hosts_file
    done
}

# Main loop
while true; do
    # Run the monitoring in the background
    monitor_docker_events &
    monitor_pid=$!

    # Wait for the specified interval or until the monitoring process exits
    sleep "$monitor_interval" & wait $!

    # After the interval, or if sleep is interrupted, proceed to stop the monitoring process
    kill "$monitor_pid" 2>/dev/null
    wait "$monitor_pid" 2>/dev/null || true  # Suppress errors if the process has already exited
done
